{"version":3,"sources":["keymirror.js","actions.js","reducers.js","components/SearchBox.js","components/News.js","components/NewsList.js","App.js","serviceWorker.js","index.js"],"names":["keymirror","ACTION_TYPE","obj","Object","keys","reduce","acc","key","CHANGE_SEARCH_FIELD","REQUEST_NEWS_PENDING","REQUEST_NEWS_SUCCESS","REQUEST_NEWS_FAILED","SORT_NEWS","actions","initialStateSearch","searchField","initialStateNews","isPending","news","error","combineReducers","searchNews","state","arguments","length","undefined","action","type","objectSpread","payload","requestNews","SearchBox","searchChange","this","props","react_default","a","createElement","className","placeholder","onChange","React","PureComponent","News","_ref","title","content","url","urlToImage","time","onClick","window","location","href","handleClick","alt","src","_time$split","split","_time$split2","slicedToArray","date","timing","_date$split","_date$split2","year","month","day","concat","substr","getTime","NewsList","newsArray","articles","map","article","components_News","publishedAt","App","sortBy","handleSortByAlpha","_this","setState","handleSortByTime","newsSort","filteredNews","sort","b","nameA","toUpperCase","nameB","onRequestNews","_this2","_this$props","onSearchChange","filter","aNew","toLowerCase","includes","SearchBox_SearchBox","components_NewsList","Component","connect","dispatch","event","text","target","value","fetch","then","response","json","data","catch","Boolean","hostname","match","logger","createLogger","rootReducer","reducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b27e651f.chunk.js","sourcesContent":["function keymirror(obj) {\n    return Object.keys(obj).reduce(\n        (acc, key) => {\n            acc[key] = key;\n            return acc;\n        },\n        {},\n    );\n}\n\nexport default keymirror;\n","import keymirror from './keymirror';\r\n\r\nconst ACTION_TYPE = keymirror({\r\n    CHANGE_SEARCH_FIELD: null,\r\n    REQUEST_NEWS_PENDING: null,\r\n    REQUEST_NEWS_SUCCESS: null,\r\n    REQUEST_NEWS_FAILED: null,\r\n    SORT_NEWS: null,\r\n});\r\n\r\nexport default ACTION_TYPE;\r\n\r\nexport const setSearchField = text => ({\r\n    type: ACTION_TYPE.CHANGE_SEARCH_FIELD,\r\n    payload: text,\r\n}); // return object\r\n\r\nexport const requestNews = () => (dispatch) => {\r\n    const country = 'us';\r\n    const apiKey = '3c175cefc17b4f5cae396104e95ccac8';\r\n\r\n    dispatch({ type: ACTION_TYPE.REQUEST_NEWS_PENDING });\r\n    // const apiObj = {\r\n    //     method: 'GET',\r\n    //     body: {\r\n    //         country,\r\n    //         apiKey,\r\n    //     },\r\n    // };\r\n    fetch(`https://newsapi.org/v2/top-headlines?country=${country}&apiKey=${apiKey}`)\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: ACTION_TYPE.REQUEST_NEWS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: ACTION_TYPE.REQUEST_NEWS_FAILED, payload: error }));\r\n};\r\n\r\nexport const sortNews = () => ({\r\n    type: ACTION_TYPE.SORT_NEWS,\r\n});\r\n","import { combineReducers } from 'redux';\nimport ACTION_TYPE from './actions';\n\nconst initialStateSearch = {\n    searchField: '',\n};\n\nexport const searchNews = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n    case ACTION_TYPE.CHANGE_SEARCH_FIELD:\n        return { ...state, searchField: action.payload };\n    default:\n        return state;\n    }\n};\n\nconst initialStateNews = {\n    isPending: false,\n    news: [],\n    error: '',\n};\n\nexport const requestNews = (state = initialStateNews, action = {}) => {\n    switch (action.type) {\n    case ACTION_TYPE.REQUEST_NEWS_PENDING:\n        return { ...state, isPending: true };\n    case ACTION_TYPE.REQUEST_NEWS_SUCCESS:\n        return { ...state, news: action.payload, isPending: false };\n    case ACTION_TYPE.REQUEST_NEWS_FAILED:\n        return { ...state, error: action.payload, isPending: false };\n    default:\n        return state;\n    }\n};\n\n\nexport default combineReducers({ searchNews, requestNews });\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../style/SearchBox.css';\r\n\r\nexport default class SearchBox extends React.PureComponent {\r\n    static propTypes = {\r\n        searchChange: PropTypes.func.isRequired,\r\n    }\r\n\r\n    render() {\r\n        const { searchChange } = this.props;\r\n        return (\r\n            (\r\n                <div className=\"searchBox\">\r\n                    <input\r\n                        className=\"ba b--green bg-lightest-blue input\"\r\n                        type=\"search\"\r\n                        placeholder=\"search news\"\r\n                        onChange={searchChange}\r\n                    />\r\n                </div>\r\n            )\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../style/News.css';\n\nfunction alerttion(e) {\n    e.preventDefault();\n    console.warn(e);\n}\n\nfunction handleClick(url) {\n    window.location.href = url;\n}\n\nconst getTime = (time) => {\n    const [date, timing] = time.split('T');\n    const [year, month, day] = date.split('-');\n    return `${year}年${month}月${day}號${timing.substr(0, timing.length - 1)}`;\n};\n\nconst News = ({ title, content, url, urlToImage, time }) => (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-s news-wrapper\">\n        <button className=\"bg-light-green news-button\" type=\"button\" onClick={() => handleClick(url)}>\n            <img className=\"image\" alt={title} src={urlToImage} />\n            <div>\n                <h2>{title}</h2>\n                <p>{content}</p>\n                <p>{getTime(time)}</p>\n            </div>\n        </button>\n    </div>\n);\n\nNews.propTypes = {\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n    urlToImage: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n};\n// src={`https://robohash.org/${id}?200*200`} >> ES6 expression\nexport default News;\n","import React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport News from './News';\r\nimport '../style/News.css';\r\n\r\n// propTypes = {\r\n//     articles: PropTypes.object.isRequired,\r\n// };\r\n\r\nconst NewsList = ({ articles }) => {\r\n    const newsArray = articles.map(article => (\r\n        <News\r\n            key={article.title}\r\n            title={article.title}\r\n            content={article.content}\r\n            url={article.url}\r\n            urlToImage={article.urlToImage}\r\n            time={article.publishedAt}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <div className=\"newsList-wrapper\">\r\n            {newsArray}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewsList;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport SearchBox from './components/SearchBox';\nimport { setSearchField, requestNews } from './actions';\nimport NewsList from './components/NewsList';\n\nconst mapStateToProps = state => ({\n    searchField: state.searchNews.searchField,\n    news: state.requestNews.news,\n    isPending: state.requestNews.isPending,\n    error: state.requestNews.error,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestNews: () => dispatch(requestNews()),\n});\n\nclass App extends Component {\n    static propTypes = {\n        onRequestNews: PropTypes.func.isRequired,\n        searchField: PropTypes.string.isRequired,\n        news: PropTypes.object.isRequired,\n        isPending: PropTypes.bool.isRequired,\n        //   error: PropTypes.string.isRequired,\n        onSearchChange: PropTypes.func.isRequired,\n    }\n\n    state = {\n        sortBy: '',\n    }\n\n    componentDidMount() {\n        this.props.onRequestNews();\n    }\n\n    handleSortByAlpha = () => {\n        this.setState({ sortBy: 'alpha' });\n    }\n\n    handleSortByTime = () => {\n        this.setState({ sortBy: 'time' });\n    }\n\n    newsSort = (filteredNews) => {\n        if (filteredNews) {\n            switch (this.state.sortBy) {\n            case 'alpha':\n                return filteredNews.sort((a, b) => {\n                    const nameA = a.title.toUpperCase(); // ignore upper and lowercase\n                    const nameB = b.title.toUpperCase(); // ignore upper and lowercase\n                    if (nameA < nameB) {\n                        return -1;\n                    }\n                    if (nameA > nameB) {\n                        return 1;\n                    }\n                    // names must be equal\n                    return 0;\n                });\n            case 'time':\n                return filteredNews.sort((a, b) => b.publishedAt - a.publishedAt);\n            default:\n                return filteredNews;\n            }\n        }\n        return null;\n    }\n\n    render() {\n        const { searchField, onSearchChange, isPending, news } = this.props;\n        const { articles } = news;\n        let filteredNews;\n        if (articles) {\n            filteredNews = articles.filter(aNew => aNew.title.toLowerCase().includes(searchField.toLowerCase()));\n            filteredNews = this.newsSort(filteredNews);\n        }\n\n        return isPending\n            ? <h1>loading</h1>\n            : (\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <div className=\"\">Waterfall Practice</div>\n                        <SearchBox\n                            searchChange={onSearchChange}\n                        />\n                        <button\n                            className=\"sort-button\"\n                            type=\"button\"\n                            onClick={() => this.handleSortByAlpha()}\n                        >sort by alphabetical order\n                        </button>\n                        <button\n                            className=\"sort-button\"\n                            type=\"button\"\n                            onClick={() => this.handleSortByTime()}\n                        >sort by time order\n                        </button>\n                    </header>\n                    <div className=\"news-container\">\n                        {articles ? <NewsList articles={filteredNews} /> : null}\n                    </div>\n                </div>\n            );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer from './reducers';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst logger = createLogger();\nconst rootReducer = reducer;\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}